// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id          String       @id @default(uuid())
  userId      String       @unique
  name        String
  imageUrl    String       @db.Text
  email       String       @db.Text
  chatServers ChatServer[]

  createAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   Member[]
  channels  Channel[]
  messages  Message[]

  directMessageId String?

  initConversation    Conversation[]  @relation("SentMessages")
  recieveConversation Conversation[]  @relation("ReceivedMessages")
  directMessages      DirectMessage[]

  @@index([directMessageId])
}

model ChatServer {
  id         String  @id @default(uuid())
  name       String
  imageUrl   String  @db.Text
  inviteCode String  @unique
  profileId  String
  profile    Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   Member[]
  channels  Channel[]

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   ChatServer @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   ChatServer @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  message   Message[]

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileURL String? @db.Text

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([profileId])
  @@index([channelId])
}

model Conversation {
  id String @id @default(uuid())

  senderId String
  sender   Profile @relation("SentMessages", fields: [senderId], references: [id])

  receiverId     String
  receiver       Profile         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  directMessages DirectMessage[]

  @@unique([senderId, receiverId])
  @@index([receiverId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileURL String? @db.Text

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([profileId])
  @@index([conversationId])
}
